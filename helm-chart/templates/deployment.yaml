apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "banking-app.fullname" . }}
  labels:
    {{- include "banking-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "banking-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "banking-app.selectorLabels" . | nindent 8 }}
    spec:
      # This section tells the pod to use the secret we created in templates/ecr-secret.yaml
      # It will only be added if imagePullSecrets.create is true in your values.yaml
      {{- if .Values.imagePullSecrets.create }}
      imagePullSecrets:
        - name: ecr-registry-secret
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccountName | default (include "banking-app.serviceAccountName" .) }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      # Wait for database to be ready (assuming values are set for the DB)
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          until pg_isready -h {{ .Values.postgresql.cluster.name }}-rw -p 5432 -U {{ .Values.database.username }}; do
            echo "Waiting for database to be ready..."
            sleep 2
          done
          echo "Database is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: banking-db-root-credentials
              key: password
      
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: {{ include "banking-app.fullname" . }}-config
        
        # Sensitive environment variables from Secrets
        env:
        - name: TOKEN_SYMMETRIC_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "banking-app.fullname" . }}-app-secrets
              key: TOKEN_SYMMETRIC_KEY
        - name: DB_SOURCE
          value: "postgres://root:{{ .Values.database.password }}@{{ .Values.postgresql.cluster.name }}-rw:5432/{{ .Values.database.database }}?sslmode=disable"
        
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
